generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String     @id @default(cuid())
  name        String
  email       String     @unique
  PhoneNumber String?    @unique
  address     String?
  ProfilePic  String?
  bio         String?
  role        Role       @default(USER)
  Session     Session[]
  Post        Post[]
  Comment     Comment[]
  Save        Save[]
  Like        Like[]
  Feedback    Feedback[]
  Market      Market[]
  Handmade    Handmade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String @id @default(cuid())
  userId       String
  sessionToken String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id             String    @id @default(cuid())
  title          String
  contentEnglish String?
  contentBurmese String?
  image          String?
  type           String
  useful         Boolean   @default(false)
  isApproved     Boolean   @default(false)
  userId         String?
  Comment        Comment[]
  Like           Like[]
  Save           Save[]
  User           User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      String  @id @default(cuid())
  content String
  Post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId  String?
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     String  @id @default(cuid())
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId]) // prevent duplicate likes
}

model Save {
  id     String  @id @default(cuid())
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id      String  @id @default(cuid())
  content String
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Market {
  id          String  @id @default(cuid())
  title       String
  description String
  price       String
  quantity    String
  type        String
  picture     String
  Order       Order[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Market    Market?  @relation(fields: [marketId], references: [id])
  marketId  String?
}

model Handmade {
  id              String @id @default(cuid())
  title           String
  descriptionEng  String
  descriptionMyan String
  picture         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
